package codigo;

import java_cup.runtime.Symbol;

action code {:
:}

parser code {:
    
    public Arbol arbolSintactico;
     private Symbol s;

    @Override
    public void syntax_error(Symbol sym) {
        Tokens t=(Tokens)sym.value;
        done_parsing();
        report_error("Error sint√°ctico cerca de \""+ t.getCadena()+"\" ["+t.getRow()+" : "+t.getCol()+"]",null);
        
    }
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
:}

init with {:
    arbolSintactico = new Arbol();
:};

terminal Linea, Comillas, T_dato, Entero, Cadena, Si, Sino, Hacer, Mientras, Para,
    Igual, Suma, Resta, Multiplicacion, Division, Op_logico, Op_relacional,
    Op_atribucion, Op_incremento, Op_booleano, Parentesis_a, Parentesis_c,
    Llave_a, Llave_c, Corchete_a, Corchete_c, Principal, P_coma, Identificador, Clase,
    Numero, Entonces,Devolver,  ERROR, Leer, Escribir, Coma, Boleano, Propiedad, Metodo,
    Dos_puntos, Desde, Disponible;
non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, SI, IF_ELSE, ES,
    WHILE, DO_WHILE,DO, SENTENCIA_DOWHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, 
    DECAFUN, CODFUN, DECACLASE, CODCLASE;

start with INICIO;

INICIO::= 
    Entero Principal Parentesis_a Parentesis_c SENTENCIA  
;
SENTENCIA::= 
    DECLARACION | 
    SI |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA_FOR |
    FOR |
    DO |
    ES P_coma|
    ES |
    Devolver Numero |
    Devolver Numero P_coma |
    Devolver Op_booleano P_coma |
    Devolver Op_booleano 
;

ES::= 
    Leer Identificador P_coma|
    Leer Identificador |
    Escribir Identificador Coma |
    Escribir Comillas Identificador Comillas 
 ;   
DECLARACION ::=   
    Entero Identificador Op_atribucion Numero Coma Identificador Op_atribucion |
    Entero Identificador Op_atribucion Numero Coma Identificador Op_atribucion Numero |
    Entero Identificador Op_atribucion Numero P_coma |
    Entero Identificador Op_atribucion Numero|
    Entero Identificador Igual Numero P_coma |    
    Entero Identificador Op_incremento P_coma |
    Entero Identificador Op_incremento | 
    Entero Identificador Coma Identificador |
    Entero Identificador P_coma| 
    Entero Identificador Igual Numero|
    Entero Identificador |
    Boleano Identificador Igual Numero |
    Boleano Identificador P_coma  |
    Boleano Identificador |
    T_dato Identificador P_coma | 
    T_dato Identificador |   
    T_dato Identificador Op_atribucion Numero P_coma |
    T_dato Identificador Op_atribucion Numero |
    T_dato Identificador Igual Numero P_coma |
    T_dato Identificador Igual Numero|
    T_dato Identificador Op_incremento P_coma | 
    T_dato Identificador Op_incremento | 
    T_dato Op_incremento Identificador P_coma | 
    T_dato Op_incremento Identificador  |
    Cadena Identificador Op_atribucion Comillas Comillas P_coma |
    Cadena Identificador Op_atribucion Comillas Comillas |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Comillas |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas |
    Cadena Identificador 
;

SI::= 
    Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Entonces SENTENCIA P_coma |
        Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Entonces SENTENCIA|
        Si SENTENCIA_BOOLEANA Entonces SENTENCIA P_coma |
        Si SENTENCIA_BOOLEANA Entonces SENTENCIA
;
SENTENCIA_BOOLEANA::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas 
   
;
IF_ELSE::= 
    Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Entonces SENTENCIA |
    Si Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Entonces SENTENCIA Sino  SENTENCIA P_coma
;
WHILE::= 
Hacer Parentesis_a SENTENCIA Parentesis_c Mientras SENTENCIA_BOOLEANA |
          Hacer SENTENCIA Mientras SENTENCIA_BOOLEANA
;
DO_WHILE::= 
Desde SENTENCIA_BOOLEANA Mientras Identificador Op_relacional Numero Op_incremento Numero Hacer SENTENCIA_DOWHILE|
             Desde Identificador Mientras Identificador Op_relacional Numero Op_incremento Numero Hacer SENTENCIA_DOWHILE
;
SENTENCIA_DOWHILE::=
    DECLARACION
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador|
    ES P_coma|
    ES
;
FOR::= Para Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_FOR::=
    T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
DECLARACION_FOR::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador |
    ES P_coma |
    ES
;
DECAFUN::= 
    T_dato Identificador Parentesis_a (DECLARACION) Parentesis_c SENTENCIA |
    T_dato Identificador Parentesis_a Parentesis_c SENTENCIA |
    T_dato Identificador Parentesis_a Identificador Parentesis_c SENTENCIA|
    Entero Identificador Parentesis_a (DECLARACION) Parentesis_c SENTENCIA |
    Entero Identificador Parentesis_a Identificador Parentesis_c SENTENCIA |
    Entero Identificador Parentesis_a Parentesis_c SENTENCIA
;

CODCLASE::=
   Propiedad Disponible Dos_puntos SENTENCIA|
   Metodo Disponible Dos_puntos SENTENCIA
;    

DECACLASE::=
    Clase Identificador Parentesis_a DECLARACION Parentesis_c CODCLASE |
    Clase Identificador Parentesis_a  Identificador Parentesis_c CODCLASE |
    Clase Identificador Parentesis_a  Parentesis_c CODCLASE|
    Clase Identificador Parentesis_a  Parentesis_c |
    Clase Identificador CODCLASE |
    Clase Identificador
;